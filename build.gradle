plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13' // here // 0.0.10
    id 'org.beryx.jlink' version '2.25.0' // here // 2.24.1
}

group 'io.github.gleidsonmt.dashboardfx'
version '1.0.4'

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
    maven { url "https://mvn.mchv.eu/repository/mchv/" }
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

ext {
    junitVersion = '5.8.2'
}

application {
    mainModule = 'io.github.gleidsonmt.dashboardfx'
    mainClass = 'io.github.gleidsonmt.dashboardfx.Starter'
}

javafx {
    version = '18.0.2' // here 18
    modules = ['javafx.controls',
               'javafx.fxml',
               'javafx.web',
               'javafx.graphics',
               'javafx.media',
               "javafx.swing"]
}

configurations.all {
//    compile.exclude('it.tdlight:tdlight-api:legacy:4.0.465')
//    exclude 'it.tdlight:tdlight-api:legacy:4.0.465'
}

dependencies {

    implementation 'org.yaml:snakeyaml:1.33'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation files('vendor/animatefx-1.2.0.jar')

    implementation 'org.kordamp.ikonli:ikonli-material-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-core:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'

    implementation 'fr.brouillard.oss:cssfx:11.5.1' // Special lib to vizualize css when app is running.. so amazing! // bro not cheat

    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-core:1.4.12'
    implementation 'ch.qos.logback:logback-classic:1.4.12'
    implementation 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'org.apache.commons:commons-lang3:3.12.0'


    // lib to use telegram bot
    implementation 'org.telegram:telegrambots:6.8.0'
    implementation ('org.telegram:telegrambots-abilities:6.8.0') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    /*implementation 'org.eclipse.collections:eclipse-collections-api:7.0.0'
    implementation 'org.eclipse.collections:eclipse-collections:7.0.0'
    implementation 'org.eclipse.collections:eclipse-collections-forkjoin:7.0.0'*/

    // lib to build telegram desktop
    implementation platform('it.tdlight:tdlight-java-bom:3.4.0+td.1.8.26')
    // do not specify the versions on the dependencies below!
    implementation group: 'it.tdlight', name: 'tdlight-java' // Java 8 is supported if you use the following dependency classifier: `jdk8`
    implementation group: 'it.tdlight', name: 'tdlight-natives', classifier: 'windows_amd64'

    implementation files('vendor/GNAvatarView-1.0.5.jar')



//    implementation 'org.commonmark:commonmark:0.20.0'
//    implementation files('vendor/GNControls-1.2.5.jar')

// Here only for tests

//    implementation files('vendor/gndecorator-2.2.31.jar')     // Decorator lib for custom windows

    implementation files('vendor/scenicView.jar')          // thta's scenic view using jfx 8.. i need to updgrade.. this is essential for view all nodes in process
//    implementation files('vendor/controlsfx-8.40.17.jar') // My favorite lib.. has a lot of functionality

//    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

//test {
//    useJUnitPlatform()
//}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'DashboardFx'
    }

    jpackage {
        installerType = 'exe'
        installerOptions += '--verbose'
        installerOptions = [
                '--description', "MoistLife",
                '--vendor', 'SilentSherlock',
                '--copyright', 'Copyright © 2023-2024 ShangHai'
//                'win-console', 'true'
//                , '--icon', 'logoT.ico'

        ]
        addExtraDependencies("javafx")
    }
}

jlinkZip {
    group = 'distribution'
}

//jlink {
//    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
//    launcher {
//        name = 'DashboardFx'
//    }
//
//    jpackage {
//
////        imageOptions = [
////                '--icon', 'logo_128.png'
////        ]
//        installerType = 'exe'
//        installerOptions = [
//                '--description', "Projeto Dashboard Fx.",
//                '--copyright', 'Copyrigth © 2021-2022 GLEIDSON NEVES DA SILVEIRA'
////                , '--icon', 'logoT.ico'
//
//        ]
//
//        addExtraDependencies("javafx")
//    }
//}


//jar {
//
////    duplicatesStrategy = DuplicatesStrategy.WARN
//    setDuplicatesStrategy(DuplicatesStrategy.WARN)
//
//    manifest {
//        attributes(
//                'Main-Class': 'io.github.gleidsonmt.dashboardfx.Starter'
//        )
//    }
//    from {
//        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}

task runWithExecJarExecutable(type: Exec) {
    dependsOn jar
    group = "io.github.gleidsonmt"
    description = "Run the output executable jar with ExecTask"
    commandLine "java", "-jar", jar.archiveFile.get()
}